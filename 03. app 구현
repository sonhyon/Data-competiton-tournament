library(sf) ; library(sp) ; library(readxl) ; library(httr) ; 
library(RJSONIO) ; library(data.table) ; library(dplyr) ; library(shiny) ;
library(leaflet) ; library(leaflet.extras) ; library(dplyr); library(XML) ;
library(data.table) ; library(stringr)

setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()

load("./ddm_full_data/ddm_full_data.rdata")
head(ddm_data)

ui <- fluidPage(
  tags$head(
    tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap"),
    tags$style(HTML("
      #title {
        font-family: 'Montserrat', sans-serif; 
        font-size: 28px; 
        font-weight: bold;
        color: #2c3e50;
      }
    "))
  ),
  
  titlePanel(
    div("관광 정보", id = "title")  # id를 지정하여 스타일 적용
  ),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("category", "유형 선택", 
                  choices = unique(ddm_data$대분류), selected = unique(ddm_data$대분류)[1]),
      selectInput("sub", "여행 경로", choices = NULL),  # 초기에는 빈 값
      verbatimTextOutput("info"),  # 장소 이름 출력
      
      # 네모 상자 추가
      div(
        style = "border: 2px solid #ddd; padding: 10px; background-color: #f9f9f9; 
                 border-radius: 5px; margin-top: 10px; width: 100%; min-height: 80px; 
                 display: flex; align-items: center; justify-content: center; font-size: 16px;",
        "여기에 추가 정보 입력 가능"
      )
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("지도",
                 leafletOutput("map", width = "100%", height = "500px")
        )
      )
    )
  )
)


server <- function(input, output, session) {
  
  # 대분류 선택 시 해당하는 소분류 목록 업데이트
  observeEvent(input$category, {
    subcategories <- ddm_data %>%
      filter(대분류 == input$category) %>%
      pull(중분류) %>%
      unique()
    
    updateSelectInput(session, "sub", choices = subcategories, selected = NULL)  # 선택 초기화
  })
  
  # 선택한 대분류 및 소분류에 따라 데이터 필터링
  filtered_data <- reactive({
    req(input$category, input$sub)  # 선택값이 없으면 실행 중단
    
    data <- ddm_data %>%
      filter(대분류 == input$category, 중분류 == input$sub)
    
    # 데이터가 비어 있는 경우 NULL 반환 (에러 방지)
    if (nrow(data) == 0) return(NULL)
    
    # 경도, 위도를 숫자로 변환 (혹시 문자형이면 오류 방지)
    data$경도 <- as.numeric(data$경도)
    data$위도 <- as.numeric(data$위도)
    
    return(data)
  })
  
  # 지도 렌더링
  output$map <- renderLeaflet({
    leaflet() %>%
      addTiles()
  })
  
  # 선택한 대분류 및 소분류에 따라 지도 업데이트
  observe({
    data <- filtered_data()
    
    # 데이터가 없을 경우 처리
    validate(
      need(!is.null(data), "선택한 조건에 해당하는 데이터가 없습니다.")
    )
    
    leafletProxy("map") %>%
      clearMarkers() %>%
      setView(lng = 127.03758, lat = 37.58060, zoom = 13) %>%
      addCircleMarkers(
        lng = ~경도, lat = ~위도, label = ~장소이름, layerId = ~장소이름,
        data = data, color = "green", radius = 11, fillOpacity = 0.7
      ) %>%
      addLabelOnlyMarkers(
        lng = ~경도, lat = ~위도, label = ~소분류, data = data,
        labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE, 
                                    style = list("color" = "white", "font-weight" = "bold", "font-size" = "14px"))
      )
  })
  
  # 마커 클릭 시 정보 표시
  observeEvent(input$map_marker_click, {
    click <- input$map_marker_click
    data <- filtered_data()
    
    if (!is.null(data)) {
      selected_place <- data %>% filter(장소이름 == click$id)
      
      if (nrow(selected_place) > 0) {
        output$info <- renderText({
          paste0("장소 이름: ", selected_place$장소이름)
        })
      }
    }
  })
}

shinyApp(ui, server)
