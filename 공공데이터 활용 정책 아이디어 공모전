#1단계: 데이터 준비
library(sf) ; library(sp) ; library(readxl) ; library(httr) ; 
library(RJSONIO) ; library(data.table) ; library(dplyr) ; library(shiny) ;
library(leaflet) ; library(leaflet.extras) ; library(dplyr); library(XML) ;
library(data.table) ; library(stringr)

setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()

ddm_fd_fs <- read_excel("./데이터/동대문구_소상공인_정리본.xlsx") #음식 패션 데이터
head(ddm_fd_fs)

ddm_hs_ct <- read_excel("./데이터/동대문구_장소.xlsx") #역사 문화 데이터
head(ddm_hs_ct)
ddm_hs_ct_juso <- data.frame(ddm_hs_ct$juso) #주소가 있는 칼럼 추출
ddm_hs_ct_juso <- data.frame(ddm_hs_ct_juso[!duplicated(ddm_hs_ct_juso), ]) #중복되는 주소를 제거


#2단계: 데이터 전처리
ddm_fd_fs <- ddm_fd_fs %>% #음식 패션 데이터 전처리
  select(!contains(c("지번주소", "도로명주소"))) 
ddm_fd_fs <- data.frame(ddm_fd_fs) 
colnames(ddm_fd_fs) <- c("장소이름", "대분류", "경도", "위도")
head(ddm_fd_fs)



#3단계: 지오 코딩하기 - 주소를 좌표로 변환
add_list <- list()
cnt <- 0
kakao_key = "746249ff2fdc7ec1fc1da2c01af66e1c"

for(i in 1:nrow(ddm_hs_ct_juso)) { #주소를 좌표료 변환하는 지오 코딩
  tryCatch(
    {
      lon_lat <- GET(url = 'https://dapi.kakao.com/v2/local/search/address.json', #카카오 API에 주소로 좌푯값을 요청
                     query = list(query = ddm_hs_ct_juso[i,]),
                     add_headers(Authorization = paste0("KakaoAK ", kakao_key)))
      coordxy <- lon_lat %>% content(as = 'text') %>% RJSONIO::fromJSON() #위경도만 추출하여 저장
      
      cnt = cnt + 1
      add_list[[cnt]] <- data.table(ddm_hs_ct_juso = ddm_hs_ct_juso[i,], #API 응답(JSON)을 text로 변환하고 RJSONIO::fromJSON()을 이용해 리스트 형태로 변환
                                    coord_x = coordxy$documents[[1]]$x, #주소, 경도, 위도 정보를 데이터 테이블로 저장 
                                    coord_y = coordxy$documents[[1]]$y)
      
      message <- paste0("[", i, "/", nrow(ddm_hs_ct_juso), "] 번째 (", #메시지 알림
                        round(i/nrow(ddm_hs_ct_juso)*100,2)," %) [", ddm_hs_ct_juso[i,] , "] 지오코딩 중입니다:
                        X= ", add_list[[cnt]]$coord_x, " / Y=", add_list[[cnt]]$coord_y)
      cat(message, "\n\n")
    }, error = function(e){cat("ERROR :",conditionMessage(e), "\n")} #오류 발생 시 대책
  )
}

ddm_geocoding <- rbindlist(add_list) #rbindlist()는 여러개의 리스트를 데이터프레임으로 변환
ddm_geocoding <- ddm_geocoding %>%  #주소 제거
  select(!contains("ddm_hs_ct_juso"))

ddm_data <- cbind(ddm_hs_ct$name ,ddm_hs_ct$대분류, ddm_geocoding)
colnames(ddm_data) <- c("장소이름", "대분류", "경도", "위도")
head(ddm_data)

ddm_data <- rbind(ddm_data, ddm_fd_fs)
ddm_data$경도 <- as.numeric(ddm_data$경도) #위도를 숫자형으로 변환
ddm_data$위도 <- as.numeric(ddm_data$위도) #경도를 숫자형으로 변환
ddm_data <- na.omit(ddm_data) #결측값 제거
head(ddm_data, 15)

#coordinates(ddm_data) <- ~경도 + 위도 #coordinates() 함수는 ddm_data를 공간 객체로 변환하는 역할을 함
#proj4string(ddm_data) <- "+proj=longlat +datum=WGS84 +no_defs" #proj4string() 함수는 ddm_data의 좌표계를 설정(WGS84 좌표계로 설정)
#ddm_data <- st_as_sf(ddm_data) #sf 패키지의 공간 객체로 변환



#──────────────────────────────────────────
ui <- bootstrapPage(
  tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
  leafletOutput("map", width="100%", height = "100%"),
  absolutePanel(top=10, right=10,
                selectInput(
                  inputId = "sel_brand",
                  label = "종류를 선택하시오",
                  choices = unique(ddm_data$대분류),
                  selected = unique(ddm_data$대분류)[1]),
  )
)

#3단계: 서버 구현하기
server <- function(input, output, session) {
  brand_sel <-  reactive({
    subset(ddm_data, 대분류 == input$sel_brand)
  })

  output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() 
  })
    
  observe({
    data <- brand_sel()
    if (nrow(data) > 0) {
      first_lng <- data$경도[1]
      first_lat <- data$위도[1]
      
      leafletProxy("map") %>%
        clearMarkers() %>%
        setView(lng=127.03758, lat=37.58060, zoom=15) %>%
        addPulseMarkers(lng = ~경도, lat = ~위도, label = ~장소이름, data = data, icon = makePulseIcon())
    }
  })
}

shinyApp(ui=ui, server=server)
